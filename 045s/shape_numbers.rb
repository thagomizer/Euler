# Triangle, pentagonal, and hexagonal numbers are generated by the following
# formulae:

# Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
# Pentagonal	 	Pn=n(3n1)/2	 	1, 5, 12, 22, 35, ...
# Hexagonal	 	Hn=n(2n1)	 	1, 6, 15, 28, 45, ...
# It can be verified that T285 = P165 = H143 = 40755.

# Find the next triangle number that is also pentagonal and hexagonal.
require 'pp'

$triangle_numbers   = {1 => 1}
$pentagonal_numbers = {1 => 1}
$hexagonal_numbers  = {1 => 1}

def triangle_number?(n)
  last_val = $triangle_numbers.values.sort.last
  if n > last_val then
    i = $triangle_numbers.keys.sort.last
    last = last_val

    while n > last do
      i += 1
      $triangle_numbers[i] = (i*(i + 1))/2

      last = $triangle_numbers[i]
    end
  end
  $triangle_numbers.values.include?(n)
end

def pentagonal_number?(n)
  if n > $pentagonal_numbers.values.sort.last then
    i = $pentagonal_numbers.keys.sort.last
    last = $pentagonal_numbers.values.sort.last

    while n > last do
      i += 1
      $pentagonal_numbers[i] = (i * ((3 * i) - 1))/2

      last = $pentagonal_numbers[i]
    end
  end
  $pentagonal_numbers.values.include?(n)
end

triangle_number?(1_000_000)
pentagonal_number?(1_000_000)


h_i = 11144
found = false
progress = 0

while !found do
  progress += 1
  h_i += 1
  num = (h_i * ((2 * h_i) - 1))
  found = pentagonal_number?(num) && triangle_number?(num)

  puts h_i if progress % 1000 == 0
end

puts h_i
(h_i * ((2 * h_i) - 1))

# 27693

# real	6m40.326s
# user	6m21.082s
# sys	0m5.645s
